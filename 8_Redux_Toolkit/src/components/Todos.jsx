import React, { useState } from "react";
import { useSelector } from "react-redux";
import { useDispatch } from "react-redux";
import {
  removeTodo,
  updateTodo,
  selectTodos,
} from "../features/todo/todoSlice";

// Verileri toplayƒ±p store g√∂ndermek i√ßin useDispatch kullanƒ±yordu.
// Bu g√∂nderilen verilere eri≈ümek/okumak i√ßin de useSelector kullanƒ±yor.
// useSelector ile store'daki verilere eri≈üebiliyoruz.
// useSelector i√ßine yazdƒ±ƒüƒ±mƒ±z fonksiyon sayesinde store'daki verilere eri≈üebiliyoruz.
// useSelector i√ßine yazdƒ±ƒüƒ±mƒ±z fonksiyonun parametresi state'dir.
// state, store'daki t√ºm verileri i√ßerir.
// state.todo, todoSlice i√ßerisindeki initialState'dƒ±r.
// state.todo.todos, initialState i√ßerisindeki todos array'idir.
function Todos() {
  // AddTodo component'inden verileri dispatch ile store g√∂nderdik.
  // O verileri geri okumamƒ±z/eri≈üebilmemiz i√ßin useSelector() redux yapƒ±sƒ±nƒ± kullanarak verilere eri≈üimimizi saƒülattƒ±k.
  // Burada useSelector(selectTodos) ile todoSlice.js i√ßerisinde export const selectTodos yapƒ±mƒ±zƒ± atadƒ±k ki verilere eri≈ümimizi saƒülattƒ±k.
  // Sonrada todos bir list olduƒüu i√ßin onu'da ilgili yerlerde map() fonksiyonu liste i√ßerisindeki verilere eri≈ütik ve kullanƒ±cƒ±ya g√∂sterdik.
  const todos = useSelector(selectTodos);
  const dispatch = useDispatch();

  const [newTodo, setNewTodo] = useState("");
  const [isTodoEditable, setIsTodoEditable] = useState(false);
  const [editedTodoId, setEditedTodoId] = useState(null);

  // Yukarƒ±daki y√∂ntemle bu y√∂ntem aynƒ±dƒ±r.
  // Sadece yukarƒ±daki y√∂ntemi todoSlice i√ßerisinde export const selectTodos ≈üeklinde kendimiz olu≈üturduk ve useSelector'a atadƒ±k.
  // const todoss = useSelector((state) => state.todos);

  // Listedeki todoyu id'sine g√∂re silme i≈ülemi
  const deleteTodoHandler = (todoId) => {
    dispatch(removeTodo(todoId));
  };

  // Listeye eklemi≈ü olduƒüumuz todo'yu id'sine g√∂re g√ºncelleme/editleme i≈ülemi.
  const updateTodoHandler = (todoId) => {
    dispatch(updateTodo({ id: todoId, text: newTodo }));
    setIsTodoEditable(false);
    setEditedTodoId(null);
  };

  return (
    <div
      className={`flex border border-r-emerald-300 border-black/10 rounded-lg shadow-sm shadow-white/75 duration-300  text-black`}
    >
      <ul className="w-full list-none">
      {todos.length === 0 ? (
        <li className="flex justify-center items-center bg-zinc-600 hover:bg-orange-400 text-2xl px-3 py-3 rounded">
          <p>Todo List Empty</p>
        </li>
      ) : (
        todos.map((todo) => (
          <li
            className="flex justify-between
             items-center bg-zinc-700 px-3 py-3 rounded
             "
            key={todo.id}
          >
            <input
              type="text"
              value={todo.id === editedTodoId ? newTodo : todo.text}
              onChange={(e) => {
                setNewTodo(e.target.value);
              }}
              readOnly={!isTodoEditable || todo.id !== editedTodoId}
              className={`flex border outline-none w-full bg-transparent text-center rounded-xl text-white ml-7 h-10 ${
                isTodoEditable && editedTodoId === todo.id
                  ? "border-orange-400 px-2 mr-9 flex"
                  : "border-transparent px-2 mr-9 flex"
              }`}
            />
            <button
              onClick={() => {
                if (isTodoEditable && editedTodoId === todo.id) {
                  updateTodoHandler(todo.id);
                } else {
                  setIsTodoEditable(true);
                  setEditedTodoId(todo.id);
                  setNewTodo(todo.text);
                }
              }}
              className={`${
                isTodoEditable && editedTodoId === todo.id
                  ? "mr-2 inline-flex w-8 h-8 rounded-lg text-sm border border-black/10 justify-center items-center bg-blue-600 shrink-0 disabled:opacity-50"
                  : "mr-2 inline-flex w-8 h-8 rounded-lg text-sm border border-black/10 justify-center items-center bg-gray-800 shrink-0 disabled:opacity-50"
              }`}
            >
              {isTodoEditable && editedTodoId === todo.id ? "üìÅ" : "‚úèÔ∏è"}
            </button>
            <button
              onClick={() => deleteTodoHandler(todo.id)}
              className="inline-flex w-8 h-8 rounded-lg text-sm border border-black/10 justify-center items-center bg-gray-50 hover:bg-yellow-300 shrink-0"
            >
              ‚ùå
            </button>
          </li>
         ))
         )}
      </ul>
    </div>
  );
}

export default Todos;
